{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\teemu\\\\OneDrive\\\\Desktop\\\\sooloilu\\\\kanban-app\\\\src\\\\components\\\\Column.js\";\nimport React, { useState } from \"react\";\nimport Ticket from \"./Ticket\";\nimport { useDrop } from \"react-dnd\";\nimport \"../Column.css\";\nimport { itemTypes } from \"../types\";\nexport default function Column(props) {\n  // stores the value of the input field\n  const [inputText, setInputText] = useState(\"\"); // filters the tickets that have the same category\n  // as the column\n\n  const tickets = props.allTickets.filter(ticket => ticket.category === props.category); // hook for the react-dnd library\n  // makes this component able to recieve dragged items\n\n  const [{\n    isOver\n  }, drop] = useDrop({\n    accept: itemTypes.TICKET,\n    drop: item => props.moveTicket(item.text, props.category),\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    })\n  }); // adds ticket to the column\n\n  const addTicket = () => {\n    props.addTicket({\n      text: inputText,\n      category: props.category\n    });\n    setInputText(\"\");\n  }; // this function executes each time the inputfield text changes\n\n\n  const handleChange = event => {\n    setInputText(event.target.value);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"cHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, props.header), /*#__PURE__*/React.createElement(\"div\", {\n    ref: drop,\n    className: \"column\",\n    style: {\n      backgroundColor: isOver ? \"#ffe0e0\" : \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, tickets.map((ticket, i) => {\n    return /*#__PURE__*/React.createElement(Ticket, {\n      key: i,\n      text: ticket.text,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 18\n      }\n    });\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"addField\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"input\",\n    onChange: handleChange,\n    value: inputText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button\",\n    onClick: addTicket,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, \"add\"))));\n}","map":{"version":3,"sources":["C:/Users/teemu/OneDrive/Desktop/sooloilu/kanban-app/src/components/Column.js"],"names":["React","useState","Ticket","useDrop","itemTypes","Column","props","inputText","setInputText","tickets","allTickets","filter","ticket","category","isOver","drop","accept","TICKET","item","moveTicket","text","collect","monitor","addTicket","handleChange","event","target","value","header","backgroundColor","map","i"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAO,eAAP;AACA,SAASC,SAAT,QAA0B,UAA1B;AAEA,eAAe,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACpC;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,EAAD,CAA1C,CAFoC,CAIpC;AACA;;AACA,QAAMQ,OAAO,GAAGH,KAAK,CAACI,UAAN,CAAiBC,MAAjB,CACbC,MAAD,IAAYA,MAAM,CAACC,QAAP,KAAoBP,KAAK,CAACO,QADxB,CAAhB,CANoC,CASpC;AACA;;AACA,QAAM,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAaC,IAAb,IAAqBZ,OAAO,CAAC;AACjCa,IAAAA,MAAM,EAAEZ,SAAS,CAACa,MADe;AAEjCF,IAAAA,IAAI,EAAGG,IAAD,IAAUZ,KAAK,CAACa,UAAN,CAAiBD,IAAI,CAACE,IAAtB,EAA4Bd,KAAK,CAACO,QAAlC,CAFiB;AAGjCQ,IAAAA,OAAO,EAAGC,OAAD,KAAc;AACrBR,MAAAA,MAAM,EAAE,CAAC,CAACQ,OAAO,CAACR,MAAR;AADW,KAAd;AAHwB,GAAD,CAAlC,CAXoC,CAmBpC;;AACA,QAAMS,SAAS,GAAG,MAAM;AACtBjB,IAAAA,KAAK,CAACiB,SAAN,CAAgB;AAAEH,MAAAA,IAAI,EAAEb,SAAR;AAAmBM,MAAAA,QAAQ,EAAEP,KAAK,CAACO;AAAnC,KAAhB;AACAL,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACD,GAHD,CApBoC,CAyBpC;;;AACA,QAAMgB,YAAY,GAAIC,KAAD,IAAW;AAC9BjB,IAAAA,YAAY,CAACiB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAZ;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyBrB,KAAK,CAACsB,MAA/B,CADF,eAEE;AACE,IAAA,GAAG,EAAEb,IADP;AAEE,IAAA,SAAS,EAAC,QAFZ;AAGE,IAAA,KAAK,EAAE;AAAEc,MAAAA,eAAe,EAAEf,MAAM,GAAG,SAAH,GAAe;AAAxC,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGL,OAAO,CAACqB,GAAR,CAAY,CAAClB,MAAD,EAASmB,CAAT,KAAe;AAC1B,wBAAO,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAEA,CAAb;AAAgB,MAAA,IAAI,EAAEnB,MAAM,CAACQ,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFA,CALH,eAQE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,SAAS,EAAC,OAAjB;AAAyB,IAAA,QAAQ,EAAEI,YAAnC;AAAiD,IAAA,KAAK,EAAEjB,SAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAQ,IAAA,SAAS,EAAC,QAAlB;AAA2B,IAAA,OAAO,EAAEgB,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAFF,CARF,CAFF,CADF;AAoBD","sourcesContent":["import React, { useState } from \"react\";\nimport Ticket from \"./Ticket\";\nimport { useDrop } from \"react-dnd\";\nimport \"../Column.css\";\nimport { itemTypes } from \"../types\";\n\nexport default function Column(props) {\n  // stores the value of the input field\n  const [inputText, setInputText] = useState(\"\");\n\n  // filters the tickets that have the same category\n  // as the column\n  const tickets = props.allTickets.filter(\n    (ticket) => ticket.category === props.category\n  );\n  // hook for the react-dnd library\n  // makes this component able to recieve dragged items\n  const [{ isOver }, drop] = useDrop({\n    accept: itemTypes.TICKET,\n    drop: (item) => props.moveTicket(item.text, props.category),\n    collect: (monitor) => ({\n      isOver: !!monitor.isOver(),\n    }),\n  });\n\n  // adds ticket to the column\n  const addTicket = () => {\n    props.addTicket({ text: inputText, category: props.category });\n    setInputText(\"\");\n  };\n\n  // this function executes each time the inputfield text changes\n  const handleChange = (event) => {\n    setInputText(event.target.value);\n  };\n\n  return (\n    <div className=\"container\">\n      <h3 className=\"cHeader\">{props.header}</h3>\n      <div\n        ref={drop}\n        className=\"column\"\n        style={{ backgroundColor: isOver ? \"#ffe0e0\" : \"white\" }}\n      >\n        {tickets.map((ticket, i) => {\n          return <Ticket key={i} text={ticket.text} />;\n        })}\n        <div className=\"addField\">\n          <input className=\"input\" onChange={handleChange} value={inputText} />\n          <button className=\"button\" onClick={addTicket}>\n            add\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}